name: Auto-Heal Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: |
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
          ~\AppData\Local\ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Create virtual environment
      run: |
        python -m venv .venv

    - name: Activate virtual environment and install dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        python -m pip install --upgrade pip setuptools wheel
        cd sources/gen-tests-self-healing
        pip install -e .

    - name: Activate virtual environment and install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        python -m pip install --upgrade pip setuptools wheel
        cd sources\gen-tests-self-healing
        pip install -e .

    - name: Install Playwright browsers
      run: |
        playwright install --with-deps chromium

    - name: Create .env file
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "LLM_PROVIDER=openai" >> .env
        echo "HEADLESS=true" >> .env
        echo "AUTO_COMMIT=false" >> .env
        echo "CONFIDENCE_THRESHOLD=0.7" >> .env

    - name: Run tests with auto-heal
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        auto-heal test-project sources/src/project-sample-1
      continue-on-error: true

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          logs/
          traces/
          screenshots/
          patches/
        retention-days: 30

    - name: Upload traces on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-traces-${{ matrix.os }}-py${{ matrix.python-version }}
        path: traces/
        retention-days: 7

    - name: Upload screenshots on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ matrix.os }}-py${{ matrix.python-version }}
        path: screenshots/
        retention-days: 7

    - name: Upload patches
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: patches-${{ matrix.os }}-py${{ matrix.python-version }}
        path: patches/
        retention-days: 30

    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ matrix.os }}-py${{ matrix.python-version }}
        path: logs/
        retention-days: 14

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip

    - name: Install linting tools
      run: |
        source .venv/bin/activate
        pip install black flake8 mypy ruff isort

    - name: Run Black
      run: |
        source .venv/bin/activate
        black --check sources/gen-tests-self-healing/framework/

    - name: Run isort
      run: |
        source .venv/bin/activate
        isort --check-only sources/gen-tests-self-healing/framework/

    - name: Run Flake8
      run: |
        source .venv/bin/activate
        flake8 sources/gen-tests-self-healing/framework/ --max-line-length=120 --ignore=E203,W503

    - name: Run Ruff
      run: |
        source .venv/bin/activate
        ruff check sources/gen-tests-self-healing/framework/

    - name: Run MyPy
      run: |
        source .venv/bin/activate
        mypy sources/gen-tests-self-healing/framework/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit
      run: |
        bandit -r sources/gen-tests-self-healing/framework/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
