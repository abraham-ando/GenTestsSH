#!/usr/bin/env python
"""
Script d'ex√©cution automatique de toutes les prochaines √©tapes
"""
import subprocess
import sys
import time
from pathlib import Path

def run_command(command, description, timeout=300):
    """Execute a command and return the result"""
    print(f"\n{'='*60}")
    print(f"üîÑ {description}")
    print(f"{'='*60}")
    print(f"Commande: {command}\n")
    
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            timeout=timeout,
            cwd=r"C:\Users\zele.abraham.ando\PycharmProjects\GenTestsSH"
        )
        
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print(result.stderr)
            
        if result.returncode == 0:
            print(f"‚úÖ {description} - R√âUSSI")
            return True
        else:
            print(f"‚ùå {description} - √âCHOU√â (code: {result.returncode})")
            return False
    except subprocess.TimeoutExpired:
        print(f"‚è±Ô∏è {description} - TIMEOUT (d√©pass√© {timeout}s)")
        return False
    except Exception as e:
        print(f"‚ùå {description} - ERREUR: {str(e)}")
        return False

def main():
    print("\n" + "üöÄ" * 30)
    print("  EX√âCUTION AUTOMATIQUE DES PROCHAINES √âTAPES")
    print("üöÄ" * 30 + "\n")
    
    base_path = Path(r"/")
    results = {}
    
    # √âtape 1: Installation du Framework
    print("\nüì¶ √âTAPE 1/5: Installation du Framework")
    results['framework'] = run_command(
        "cd sources/gen-tests-self-healing && pip install -e .",
        "Installation du framework",
        timeout=180
    )
    
    if not results['framework']:
        print("\n‚ö†Ô∏è L'installation du framework a √©chou√©. Arr√™t du script.")
        return 1
    
    # √âtape 2: Installation de Playwright
    print("\nüì¶ √âTAPE 2/5: Installation de Playwright")
    results['playwright'] = run_command(
        "playwright install",
        "Installation des navigateurs Playwright",
        timeout=600  # 10 minutes
    )
    
    # √âtape 3: V√©rification
    print("\nüîç √âTAPE 3/5: V√©rification de l'installation")
    
    # V√©rifier que le package est install√©
    print("\nV√©rification du package gen-tests-self-healing...")
    check_pkg = run_command(
        "pip show gen-tests-self-healing",
        "V√©rification du package install√©",
        timeout=10
    )

    if not check_pkg:
        print("‚ö†Ô∏è Le package n'est pas install√©. Tentative de v√©rification alternative...")
        results['version'] = False
        results['config'] = False
    else:
        # V√©rifier la version avec Python direct (plus fiable)
        print("\nV√©rification de la commande auto-heal...")
        results['version'] = run_command(
            'python -c "from framework.cli import cli; print(\'CLI import√© avec succ√®s\')"',
            "V√©rification de l'import du CLI",
            timeout=10
        )

        # Essayer la commande auto-heal si disponible
        if results['version']:
            run_command(
                "auto-heal --version",
                "Test de la commande auto-heal (optionnel)",
                timeout=10
            )

        # V√©rifier la configuration
        results['config'] = run_command(
            "python -c \"from framework.core.config import config; print('Config OK')\"",
            "V√©rification de la configuration",
            timeout=10
        )

    # √âtape 4: Test de project-sample-1
    print("\nüß™ √âTAPE 4/5: Test de project-sample-1")
    results['test_sample'] = run_command(
        "auto-heal test-project sources/src/project-sample-1",
        "Test du projet sample-1",
        timeout=120
    )
    
    # √âtape 5: Cr√©er un projet test
    print("\nüÜï √âTAPE 5/5: Cr√©ation d'un projet de validation")
    results['create_project'] = run_command(
        "auto-heal create-project test-validation",
        "Cr√©ation d'un projet de test",
        timeout=30
    )
    
    # V√©rifier que le projet a √©t√© cr√©√©
    test_project_path = base_path / "sources" / "src" / "test-validation"
    if test_project_path.exists():
        print(f"‚úÖ Projet test-validation cr√©√© avec succ√®s: {test_project_path}")
        results['verify_project'] = True
    else:
        print(f"‚ùå Projet test-validation non trouv√©: {test_project_path}")
        results['verify_project'] = False
    
    # R√©sum√© final
    print("\n" + "="*60)
    print("üìä R√âSUM√â DES R√âSULTATS")
    print("="*60)
    
    total = len(results)
    passed = sum(1 for v in results.values() if v)
    
    print(f"\n‚úÖ √âtapes r√©ussies: {passed}/{total}\n")
    
    for step, success in results.items():
        status = "‚úÖ R√âUSSI" if success else "‚ùå √âCHOU√â"
        print(f"  {step.ljust(20)} : {status}")
    
    # Conclusion
    print("\n" + "="*60)
    if all(results.values()):
        print("üéâ TOUTES LES √âTAPES ONT R√âUSSI!")
        print("="*60)
        print("\n‚úÖ Installation compl√®te termin√©e avec succ√®s!")
        print("\nVous pouvez maintenant:")
        print("  ‚Ä¢ Cr√©er des projets: auto-heal create-project <nom>")
        print("  ‚Ä¢ Tester des projets: auto-heal test-project <chemin>")
        print("  ‚Ä¢ V√©rifier le statut: auto-heal status")
        return 0
    else:
        print("‚ö†Ô∏è CERTAINES √âTAPES ONT √âCHOU√â")
        print("="*60)
        print("\nConsultez les erreurs ci-dessus pour plus de d√©tails.")
        print("\nPour r√©essayer manuellement:")
        print("  1. Ouvrez QUICK_INSTALL.md")
        print("  2. Suivez les √©tapes une par une")
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        print(f"\n\nScript termin√© avec le code: {exit_code}")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Script interrompu par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\n\n‚ùå Erreur fatale: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

